//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Coop New/Scripts/InputManager/Joystick.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @JoystickControler : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @JoystickControler()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Joystick"",
    ""maps"": [
        {
            ""name"": ""AircraftMove"",
            ""id"": ""cc4f7e07-d011-4172-b00a-eff7edbe640d"",
            ""actions"": [
                {
                    ""name"": ""LR"",
                    ""type"": ""Value"",
                    ""id"": ""d20c6d59-a0b4-49b4-a201-093a9147d4cb"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UD"",
                    ""type"": ""Value"",
                    ""id"": ""1c856af2-11eb-436b-9704-680d6f6676df"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Thrust"",
                    ""type"": ""Value"",
                    ""id"": ""987c87ae-d8bb-47a4-9210-1974ff4929e6"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""16ab6ee9-7fe0-4eca-95d7-1bd025df1765"",
                    ""path"": ""<Joystick>/stick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LR"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""10081154-8ea9-4437-9161-ed9e0f5e1edc"",
                    ""path"": ""<Joystick>/stick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""890e466a-f69d-42eb-8630-f1f7364d178f"",
                    ""path"": ""<HID::Thrustmaster, Inc. USB Game Controllers>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Fire"",
            ""id"": ""7d497970-6125-4186-a5a7-f06bc6c29da4"",
            ""actions"": [
                {
                    ""name"": ""MissileA"",
                    ""type"": ""Button"",
                    ""id"": ""3d47a9f7-c426-4463-899d-d36e070da1cc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MissileB"",
                    ""type"": ""Button"",
                    ""id"": ""1acb74fe-f4f4-409b-ba15-8a52cbf47096"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MissileC"",
                    ""type"": ""Button"",
                    ""id"": ""fb14b486-28a7-45de-9235-d7b7c65e94ed"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Gun"",
                    ""type"": ""Button"",
                    ""id"": ""fb340eba-8b5b-4237-8e92-bd33419ec0b0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2ff6e48f-89b0-4dbb-84a2-6674b9bf8701"",
                    ""path"": ""<HID::Thrustmaster, Inc. USB Game Controllers>/button2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MissileA"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13530598-5209-4d65-be3f-a0ec0417973f"",
                    ""path"": ""<HID::Thrustmaster, Inc. USB Game Controllers>/button3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MissileB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0036b1fd-4d07-46a1-b080-e88bb177afc6"",
                    ""path"": ""<HID::Thrustmaster, Inc. USB Game Controllers>/button4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MissileC"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""02a24162-91b4-42df-8a3b-402d1ce204c9"",
                    ""path"": ""<Joystick>/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gun"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // AircraftMove
        m_AircraftMove = asset.FindActionMap("AircraftMove", throwIfNotFound: true);
        m_AircraftMove_LR = m_AircraftMove.FindAction("LR", throwIfNotFound: true);
        m_AircraftMove_UD = m_AircraftMove.FindAction("UD", throwIfNotFound: true);
        m_AircraftMove_Thrust = m_AircraftMove.FindAction("Thrust", throwIfNotFound: true);
        // Fire
        m_Fire = asset.FindActionMap("Fire", throwIfNotFound: true);
        m_Fire_MissileA = m_Fire.FindAction("MissileA", throwIfNotFound: true);
        m_Fire_MissileB = m_Fire.FindAction("MissileB", throwIfNotFound: true);
        m_Fire_MissileC = m_Fire.FindAction("MissileC", throwIfNotFound: true);
        m_Fire_Gun = m_Fire.FindAction("Gun", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // AircraftMove
    private readonly InputActionMap m_AircraftMove;
    private IAircraftMoveActions m_AircraftMoveActionsCallbackInterface;
    private readonly InputAction m_AircraftMove_LR;
    private readonly InputAction m_AircraftMove_UD;
    private readonly InputAction m_AircraftMove_Thrust;
    public struct AircraftMoveActions
    {
        private @JoystickControler m_Wrapper;
        public AircraftMoveActions(@JoystickControler wrapper) { m_Wrapper = wrapper; }
        public InputAction @LR => m_Wrapper.m_AircraftMove_LR;
        public InputAction @UD => m_Wrapper.m_AircraftMove_UD;
        public InputAction @Thrust => m_Wrapper.m_AircraftMove_Thrust;
        public InputActionMap Get() { return m_Wrapper.m_AircraftMove; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AircraftMoveActions set) { return set.Get(); }
        public void SetCallbacks(IAircraftMoveActions instance)
        {
            if (m_Wrapper.m_AircraftMoveActionsCallbackInterface != null)
            {
                @LR.started -= m_Wrapper.m_AircraftMoveActionsCallbackInterface.OnLR;
                @LR.performed -= m_Wrapper.m_AircraftMoveActionsCallbackInterface.OnLR;
                @LR.canceled -= m_Wrapper.m_AircraftMoveActionsCallbackInterface.OnLR;
                @UD.started -= m_Wrapper.m_AircraftMoveActionsCallbackInterface.OnUD;
                @UD.performed -= m_Wrapper.m_AircraftMoveActionsCallbackInterface.OnUD;
                @UD.canceled -= m_Wrapper.m_AircraftMoveActionsCallbackInterface.OnUD;
                @Thrust.started -= m_Wrapper.m_AircraftMoveActionsCallbackInterface.OnThrust;
                @Thrust.performed -= m_Wrapper.m_AircraftMoveActionsCallbackInterface.OnThrust;
                @Thrust.canceled -= m_Wrapper.m_AircraftMoveActionsCallbackInterface.OnThrust;
            }
            m_Wrapper.m_AircraftMoveActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LR.started += instance.OnLR;
                @LR.performed += instance.OnLR;
                @LR.canceled += instance.OnLR;
                @UD.started += instance.OnUD;
                @UD.performed += instance.OnUD;
                @UD.canceled += instance.OnUD;
                @Thrust.started += instance.OnThrust;
                @Thrust.performed += instance.OnThrust;
                @Thrust.canceled += instance.OnThrust;
            }
        }
    }
    public AircraftMoveActions @AircraftMove => new AircraftMoveActions(this);

    // Fire
    private readonly InputActionMap m_Fire;
    private IFireActions m_FireActionsCallbackInterface;
    private readonly InputAction m_Fire_MissileA;
    private readonly InputAction m_Fire_MissileB;
    private readonly InputAction m_Fire_MissileC;
    private readonly InputAction m_Fire_Gun;
    public struct FireActions
    {
        private @JoystickControler m_Wrapper;
        public FireActions(@JoystickControler wrapper) { m_Wrapper = wrapper; }
        public InputAction @MissileA => m_Wrapper.m_Fire_MissileA;
        public InputAction @MissileB => m_Wrapper.m_Fire_MissileB;
        public InputAction @MissileC => m_Wrapper.m_Fire_MissileC;
        public InputAction @Gun => m_Wrapper.m_Fire_Gun;
        public InputActionMap Get() { return m_Wrapper.m_Fire; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FireActions set) { return set.Get(); }
        public void SetCallbacks(IFireActions instance)
        {
            if (m_Wrapper.m_FireActionsCallbackInterface != null)
            {
                @MissileA.started -= m_Wrapper.m_FireActionsCallbackInterface.OnMissileA;
                @MissileA.performed -= m_Wrapper.m_FireActionsCallbackInterface.OnMissileA;
                @MissileA.canceled -= m_Wrapper.m_FireActionsCallbackInterface.OnMissileA;
                @MissileB.started -= m_Wrapper.m_FireActionsCallbackInterface.OnMissileB;
                @MissileB.performed -= m_Wrapper.m_FireActionsCallbackInterface.OnMissileB;
                @MissileB.canceled -= m_Wrapper.m_FireActionsCallbackInterface.OnMissileB;
                @MissileC.started -= m_Wrapper.m_FireActionsCallbackInterface.OnMissileC;
                @MissileC.performed -= m_Wrapper.m_FireActionsCallbackInterface.OnMissileC;
                @MissileC.canceled -= m_Wrapper.m_FireActionsCallbackInterface.OnMissileC;
                @Gun.started -= m_Wrapper.m_FireActionsCallbackInterface.OnGun;
                @Gun.performed -= m_Wrapper.m_FireActionsCallbackInterface.OnGun;
                @Gun.canceled -= m_Wrapper.m_FireActionsCallbackInterface.OnGun;
            }
            m_Wrapper.m_FireActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MissileA.started += instance.OnMissileA;
                @MissileA.performed += instance.OnMissileA;
                @MissileA.canceled += instance.OnMissileA;
                @MissileB.started += instance.OnMissileB;
                @MissileB.performed += instance.OnMissileB;
                @MissileB.canceled += instance.OnMissileB;
                @MissileC.started += instance.OnMissileC;
                @MissileC.performed += instance.OnMissileC;
                @MissileC.canceled += instance.OnMissileC;
                @Gun.started += instance.OnGun;
                @Gun.performed += instance.OnGun;
                @Gun.canceled += instance.OnGun;
            }
        }
    }
    public FireActions @Fire => new FireActions(this);
    public interface IAircraftMoveActions
    {
        void OnLR(InputAction.CallbackContext context);
        void OnUD(InputAction.CallbackContext context);
        void OnThrust(InputAction.CallbackContext context);
    }
    public interface IFireActions
    {
        void OnMissileA(InputAction.CallbackContext context);
        void OnMissileB(InputAction.CallbackContext context);
        void OnMissileC(InputAction.CallbackContext context);
        void OnGun(InputAction.CallbackContext context);
    }
}
